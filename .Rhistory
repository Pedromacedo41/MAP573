shinyApp(ui = ui, server = server)
# Define UI for app that draws a histogram ----
ui <- navbarPage("Energy Forecast Data Visualisation",
tabPanel("Time Series",
sidebarPanel(
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
checkboxInput("checkbox", "See in-day variations (otherwise take day mean)", value = TRUE),
checkboxGroupInput("checkGroup",
strong("Time Serie Select"),
choices = list("Energie" = 1,
"Temperature" = 2),
selected = 1),
radioButtons("radio", strong("Z axis quantity"),
choices = list("Temperature" = 1, "Energy" = 2),selected = 1),
dateRangeInput("dates", strong("Date range")),
selectInput("select", strong("Zone_id Select"),
choices = list("Zone1" = 1,"Zone2" = 2,"Zone3" = 3, "Zone4" = 4, "Zone5" = 5, "Zone6" = 6, "Zone7" = 7,
"Zone8" = 8,"Zone9" = 9,"Zone10" = 10,"Zone11" = 11,"Zone12" = 12,"Zone13" = 13,
"Zone14" = 14,"Zone15" = 15, "Zone16" = 16,"Zone17" = 17,"Zone18" = 18, "Zone19" = 19,
"Zone20" = 20),
selected = 1),
textInput("text", strong("SQL command on Time Serie dataframe:"),
value = "Enter command..."),
helpText("See table tab to see the Time Series column names. Result Click Reload to restore data to defaut"),
actionButton("action", "Restore Data")
),
# Main panel for displaying outputs ----
mainPanel(
tabsetPanel(
tabPanel("Plot", plotOutput(outputId = "distPlot")),
tabPanel("Summary", verbatimTextOutput("summary")),
tabPanel("Table", tableOutput("table"))
)
)
),
tabPanel("SQL Time Series"),
tabPanel("3D Time Series")
)
shinyApp(ui = ui, server = server)
# Define UI for app that draws a histogram ----
ui <- navbarPage("Energy Forecast Data Visualisation",
tabPanel("Time Series",
sidebarPanel(
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
checkboxInput("checkbox", "See in-day variations (otherwise take day mean)", value = TRUE),
checkboxGroupInput("checkGroup",
strong("Time Serie Select"),
choices = list("Energie" = 1,
"Temperature" = 2),
selected = 1),
radioButtons("radio", strong("Z axis quantity"),
choices = list("Temperature" = 1, "Energy" = 2),selected = 1),
dateRangeInput("dates", strong("Date range")),
selectInput("select", strong("Zone_id Select"),
choices = list("Zone1" = 1,"Zone2" = 2,"Zone3" = 3, "Zone4" = 4, "Zone5" = 5, "Zone6" = 6, "Zone7" = 7,
"Zone8" = 8,"Zone9" = 9,"Zone10" = 10,"Zone11" = 11,"Zone12" = 12,"Zone13" = 13,
"Zone14" = 14,"Zone15" = 15, "Zone16" = 16,"Zone17" = 17,"Zone18" = 18, "Zone19" = 19,
"Zone20" = 20),
selected = 1),
textInput("text", strong("SQL command on Time Serie dataframe:"),
value = "Enter command..."),
helpText("See table tab to see the Time Series column names. Result must contain a datetime column","Click Reload to restore data to defaut"),
actionButton("action", "Restore Data")
),
# Main panel for displaying outputs ----
mainPanel(
tabsetPanel(
tabPanel("Plot", plotOutput(outputId = "distPlot")),
tabPanel("Summary", verbatimTextOutput("summary")),
tabPanel("Table", tableOutput("table"))
)
)
),
tabPanel("SQL Time Series"),
tabPanel("3D Time Series")
)
shinyApp(ui = ui, server = server)
# Define UI for app that draws a histogram ----
ui <- navbarPage("Energy Forecast Data Visualisation",
tabPanel("Time Series",
sidebarPanel(
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
checkboxInput("checkbox", "See in-day variations (otherwise take day mean)", value = TRUE),
checkboxGroupInput("checkGroup",
strong("Time Serie Select"),
choices = list("Energie" = 1,
"Temperature" = 2),
selected = 1),
radioButtons("radio", strong("Z axis quantity"),
choices = list("Temperature" = 1, "Energy" = 2),selected = 1),
dateRangeInput("dates", strong("Date range")),
selectInput("select", strong("Zone_id Select"),
choices = list("Zone1" = 1,"Zone2" = 2,"Zone3" = 3, "Zone4" = 4, "Zone5" = 5, "Zone6" = 6, "Zone7" = 7,
"Zone8" = 8,"Zone9" = 9,"Zone10" = 10,"Zone11" = 11,"Zone12" = 12,"Zone13" = 13,
"Zone14" = 14,"Zone15" = 15, "Zone16" = 16,"Zone17" = 17,"Zone18" = 18, "Zone19" = 19,
"Zone20" = 20),
selected = 1),
textInput("text", strong("SQL command on Time Serie dataframe:"),
value = "Enter command..."),
helpText("See table tab to see the Time Series column names. Result must contain a datetime column"),
actionButton("action", "Restore Data to Default")
),
# Main panel for displaying outputs ----
mainPanel(
tabsetPanel(
tabPanel("Plot", plotOutput(outputId = "distPlot")),
tabPanel("Summary", verbatimTextOutput("summary")),
tabPanel("Table", tableOutput("table"))
)
)
),
tabPanel("SQL Time Series"),
tabPanel("3D Time Series")
)
shinyApp(ui = ui, server = server)
# Define UI for app that draws a histogram ----
ui <- navbarPage("Energy Forecast Data Visualisation",
tabPanel("Time Series",
sidebarPanel(
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
checkboxInput("checkbox", "See in-day variations (otherwise take day mean)", value = TRUE),
checkboxGroupInput("checkGroup",
strong("Time Serie Select"),
choices = list("Energie" = 1,
"Temperature" = 2),
selected = 1),
radioButtons("radio", strong("Z axis quantity"),
choices = list("Temperature" = 1, "Energy" = 2),selected = 1),
dateRangeInput("dates", strong("Date range")),
selectInput("select", strong("Zone_id Select"),
choices = list("Zone1" = 1,"Zone2" = 2,"Zone3" = 3, "Zone4" = 4, "Zone5" = 5, "Zone6" = 6, "Zone7" = 7,
"Zone8" = 8,"Zone9" = 9,"Zone10" = 10,"Zone11" = 11,"Zone12" = 12,"Zone13" = 13,
"Zone14" = 14,"Zone15" = 15, "Zone16" = 16,"Zone17" = 17,"Zone18" = 18, "Zone19" = 19,
"Zone20" = 20),
selected = 1),
textInput("text", strong("SQL command on Time Serie dataframe:"),
value = "Enter command..."),
helpText("See table tab to see the Time Series column names. Result must contain the datetime column"),
actionButton("action", "Restore Data to Default")
),
# Main panel for displaying outputs ----
mainPanel(
tabsetPanel(
tabPanel("Plot", plotOutput(outputId = "distPlot")),
tabPanel("Summary", verbatimTextOutput("summary")),
tabPanel("Table", tableOutput("table"))
)
)
),
tabPanel("SQL Time Series"),
tabPanel("3D Time Series")
)
shinyApp(ui = ui, server = server)
# Define UI for app that draws a histogram ----
ui <- navbarPage("Energy Forecast Data Visualisation",
tabPanel("Time Series",
sidebarPanel(
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
checkboxInput("checkbox", "See in-day variations (otherwise take day mean)", value = TRUE),
checkboxGroupInput("checkGroup",
strong("Time Serie Select"),
choices = list("Energie" = 1,
"Temperature" = 2),
selected = 1),
radioButtons("radio", strong("Z axis quantity"),
choices = list("Temperature" = 1, "Energy" = 2),selected = 1),
dateRangeInput("dates", strong("Date range")),
selectInput("select", strong("Zone_id Select"),
choices = list("Zone1" = 1,"Zone2" = 2,"Zone3" = 3, "Zone4" = 4, "Zone5" = 5, "Zone6" = 6, "Zone7" = 7,
"Zone8" = 8,"Zone9" = 9,"Zone10" = 10,"Zone11" = 11,"Zone12" = 12,"Zone13" = 13,
"Zone14" = 14,"Zone15" = 15, "Zone16" = 16,"Zone17" = 17,"Zone18" = 18, "Zone19" = 19,
"Zone20" = 20),
selected = 1),
textInput("text", strong("SQL command on Time Serie dataframe:"),
value = "Enter command..."),
helpText("See table tab to see the Time Series column names. Result must contain datetime column"),
actionButton("action", "Restore Data to Default")
),
# Main panel for displaying outputs ----
mainPanel(
tabsetPanel(
tabPanel("Plot", plotOutput(outputId = "distPlot")),
tabPanel("Summary", verbatimTextOutput("summary")),
tabPanel("Table", tableOutput("table"))
)
)
),
tabPanel("SQL Time Series"),
tabPanel("3D Time Series")
)
shinyApp(ui = ui, server = server)
# Define UI for app that draws a histogram ----
ui <- navbarPage("Energy Forecast Data Visualisation",
tabPanel("Time Series",
sidebarPanel(
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
checkboxInput("checkbox", "See in-day variations (otherwise it will take the day mean)", value = TRUE),
checkboxGroupInput("checkGroup",
strong("Time Serie Select"),
choices = list("Energie" = 1,
"Temperature" = 2),
selected = 1),
radioButtons("radio", strong("Z axis quantity"),
choices = list("Temperature" = 1, "Energy" = 2),selected = 1),
dateRangeInput("dates", strong("Date range")),
selectInput("select", strong("Zone_id Select"),
choices = list("Zone1" = 1,"Zone2" = 2,"Zone3" = 3, "Zone4" = 4, "Zone5" = 5, "Zone6" = 6, "Zone7" = 7,
"Zone8" = 8,"Zone9" = 9,"Zone10" = 10,"Zone11" = 11,"Zone12" = 12,"Zone13" = 13,
"Zone14" = 14,"Zone15" = 15, "Zone16" = 16,"Zone17" = 17,"Zone18" = 18, "Zone19" = 19,
"Zone20" = 20),
selected = 1),
textInput("text", strong("SQL command on Time Serie dataframe:"),
value = "Enter command..."),
helpText("See table tab to see the Time Series column names. Result must contain datetime column"),
actionButton("action", "Restore Data to Default")
),
# Main panel for displaying outputs ----
mainPanel(
tabsetPanel(
tabPanel("Plot", plotOutput(outputId = "distPlot")),
tabPanel("Summary", verbatimTextOutput("summary")),
tabPanel("Table", tableOutput("table"))
)
)
),
tabPanel("SQL Time Series"),
tabPanel("3D Time Series")
)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
# Define UI for app that draws a histogram ----
ui <- navbarPage("Energy Forecast Data Visualisation",
tabPanel("Time Series",
sidebarPanel(
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
checkboxInput("checkbox", "See in-day variations (otherwise it will take the day mean)", value = TRUE),
checkboxGroupInput("checkGroup",
strong("Time Serie Select"),
choices = list("Energie" = 1,
"Temperature" = 2),
selected = 1),
radioButtons("radio", strong("Z axis quantity"),
choices = list("Temperature" = 1, "Energy" = 2),selected = 1),
radioButtons("radio", strong("Z axis quantity"),
choices = list("Daily Data Table (with day mean values)" = 1, "Complete Table" = 2),selected = 1),
dateRangeInput("dates", strong("Date range")),
selectInput("select", strong("Zone_id Select"),
choices = list("Zone1" = 1,"Zone2" = 2,"Zone3" = 3, "Zone4" = 4, "Zone5" = 5, "Zone6" = 6, "Zone7" = 7,
"Zone8" = 8,"Zone9" = 9,"Zone10" = 10,"Zone11" = 11,"Zone12" = 12,"Zone13" = 13,
"Zone14" = 14,"Zone15" = 15, "Zone16" = 16,"Zone17" = 17,"Zone18" = 18, "Zone19" = 19,
"Zone20" = 20),
selected = 1),
textInput("text", strong("SQL command on Time Serie dataframe:"),
value = "Enter command..."),
helpText("See table tab to see the Time Series column names. Result must contain datetime column"),
actionButton("action", "Restore Data to Default")
),
# Main panel for displaying outputs ----
mainPanel(
tabsetPanel(
tabPanel("Plot", plotOutput(outputId = "distPlot")),
tabPanel("Summary", verbatimTextOutput("summary")),
tabPanel("Table", tableOutput("table"))
)
)
),
tabPanel("SQL Time Series"),
tabPanel("3D Time Series")
)
shinyApp(ui = ui, server = server)
# Define UI for app that draws a histogram ----
ui <- navbarPage("Energy Forecast Data Visualisation",
tabPanel("Time Series",
sidebarPanel(
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
checkboxInput("checkbox", "See in-day variations (otherwise it will take the day mean)", value = TRUE),
checkboxGroupInput("checkGroup",
strong("Time Serie Select"),
choices = list("Energie" = 1,
"Temperature" = 2),
selected = 1),
radioButtons("radio", strong("Z axis quantity"),
choices = list("Temperature" = 1, "Energy" = 2),selected = 1),
radioButtons("radio", strong("Z axis quantity"),
choices = list("Daily Data Table" = 1, "Complete Time Serie Table" = 2),selected = 1),
dateRangeInput("dates", strong("Date range")),
selectInput("select", strong("Zone_id Select"),
choices = list("Zone1" = 1,"Zone2" = 2,"Zone3" = 3, "Zone4" = 4, "Zone5" = 5, "Zone6" = 6, "Zone7" = 7,
"Zone8" = 8,"Zone9" = 9,"Zone10" = 10,"Zone11" = 11,"Zone12" = 12,"Zone13" = 13,
"Zone14" = 14,"Zone15" = 15, "Zone16" = 16,"Zone17" = 17,"Zone18" = 18, "Zone19" = 19,
"Zone20" = 20),
selected = 1),
textInput("text", strong("SQL command on Time Serie dataframe:"),
value = "table name is table"),
helpText("See table tab to see the Time Series column names. Result must contain datetime column"),
actionButton("action", "Restore Data to Default")
),
# Main panel for displaying outputs ----
mainPanel(
tabsetPanel(
tabPanel("Plot", plotOutput(outputId = "distPlot")),
tabPanel("Summary", verbatimTextOutput("summary")),
tabPanel("Table", tableOutput("table"))
)
)
),
tabPanel("SQL Time Series"),
tabPanel("3D Time Series")
)
shinyApp(ui = ui, server = server)
# Define UI for app that draws a histogram ----
ui <- navbarPage("Energy Forecast Data Visualisation",
tabPanel("Time Series",
sidebarPanel(
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
checkboxInput("checkbox", "See in-day variations (otherwise it will take the day mean)", value = TRUE),
checkboxGroupInput("checkGroup",
strong("Time Serie Select"),
choices = list("Energie" = 1,
"Temperature" = 2),
selected = 1),
radioButtons("radio", strong("Z axis quantity"),
choices = list("Temperature" = 1, "Energy" = 2),selected = 1),
radioButtons("radio", strong("Input Table"),
choices = list("Daily Data Table" = 1, "Complete Time Serie Table" = 2),selected = 1),
dateRangeInput("dates", strong("Date range")),
selectInput("select", strong("Zone_id Select"),
choices = list("Zone1" = 1,"Zone2" = 2,"Zone3" = 3, "Zone4" = 4, "Zone5" = 5, "Zone6" = 6, "Zone7" = 7,
"Zone8" = 8,"Zone9" = 9,"Zone10" = 10,"Zone11" = 11,"Zone12" = 12,"Zone13" = 13,
"Zone14" = 14,"Zone15" = 15, "Zone16" = 16,"Zone17" = 17,"Zone18" = 18, "Zone19" = 19,
"Zone20" = 20),
selected = 1),
textInput("text", strong("SQL command on Time Serie dataframe:"),
value = "table name is table"),
helpText("See table tab to see the Time Series column names. Result must contain datetime column"),
actionButton("action", "Restore Data to Default")
),
# Main panel for displaying outputs ----
mainPanel(
tabsetPanel(
tabPanel("Plot", plotOutput(outputId = "distPlot")),
tabPanel("Summary", verbatimTextOutput("summary")),
tabPanel("Table", tableOutput("table"))
)
)
),
tabPanel("SQL Time Series"),
tabPanel("3D Time Series")
)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
source('D:/MAP573/MAP573/RVisualisation/RVis/app.R')
getwd()
library(shiny)
runApp('D:/MAP573/ProjMap/RVis')
libray(shiny)
library(shiny)
runApp('D:/MAP573/ProjMap/RVis')
runApp('D:/MAP573/ProjMap/RVis')
runApp('D:/MAP573/ProjMap/RVis')
runApp('D:/MAP573/ProjMap/RVis')
shiny::runApp('D:/MAP573/ProjMap/RVis')
runApp('D:/MAP573/ProjMap/RVis')
runApp('D:/MAP573/ProjMap/RVis')
runApp('D:/MAP573/ProjMap/RVis')
runApp('D:/MAP573/ProjMap/RVis')
runApp('D:/MAP573/ProjMap/RVis')
runApp('D:/MAP573/ProjMap/RVis')
runApp('D:/MAP573/ProjMap/RVis')
xd4= fread("./../Data/Predict & Hyper/lstm_predictor_168h_window1000_32160_33328.csv", sep=",")
xd4= fread("./../Data/Predict\/&\/Hyper/lstm_predictor_168h_window1000_32160_33328.csv", sep=",")
xd4= fread("./../Data/PredictHyper/lstm_predictor_168h_window1000_32160_33328.csv", sep=",")
xd4= fread("./../Data/PredictHyper/bidirectional_longer.csv", sep=",")
setwd("D:/MAP573/ProjMap")
xd4= fread("./Data/PredictHyper/lstm_predictor_168h_window1000_32160_33328.csv", sep=",")
xd4= data.frame(xd4)
view(xd4)
xd4= fread("./Data/PredictHyper/lstm_predictor_168h_window1000_32160_33328.csv", sep=",")
xd4 <- t(xd4)
xd4= data.frame(xd4)
view(xd4)
xd4= fread("./Data/PredictHyper/lstm_predictor_168h_window1000_32160_33328.csv", sep=",")
xd4 <- t(xd4)
xd4= data.frame(xd4)
names(xd4)[0] <- V1
names(xd4)[0] <- "V1"
view(xd4)
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
print(strsplit("2008-04-20 04:00:00 UTC"))
print(strsplit("2008-04-20 04:00:00 UTC", " "))
print(strsplit("2008-04-20 04:00:00 UTC", " ")[0])
print(strsplit("2008-04-20 04:00:00 UTC", " ")[1])
print(strsplit("2008-04-20 04:00:00 UTC", " ")[1][1])
print(strsplit("2008-04-20 04:00:00 UTC", " ")[1,1])
print(strsplit("2008-04-20 04:00:00 UTC", " "))
view(strsplit("2008-04-20 04:00:00 UTC", " "))
noquote(strsplit("2008-04-20 04:00:00 UTC", " ")[[1]])
noquote(strsplit("2008-04-20 04:00:00 UTC", " ")[[1,0]])
noquote(strsplit("2008-04-20 04:00:00 UTC", " ")[[1,1]])
noquote(strsplit("2008-04-20 04:00:00 UTC", " ")[[1,1]])
noquote(strsplit("2008-04-20 04:00:00 UTC", " ")[[1]])
strsplit("2008-04-20 04:00:00 UTC", " ")
t(strsplit("2008-04-20 04:00:00 UTC", " "))
strsplit("2008-04-20 04:00:00 UTC", " ")
strsplit("2008-04-20 04:00:00 UTC", " ")[2]
strsplit("2008-04-20 04:00:00 UTC", " ")[1]
strsplit("2008-04-20 04:00:00 UTC", " ")[[1]]
strsplit("2008-04-20 04:00:00 UTC", " ")[[1]][1]
strsplit("2008-04-20 04:00:00 UTC", " ")[1]
strsplit("2008-04-20 04:00:00 UTC", " ")[[1]][1]
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
xd1= t(fread("./Data/PredictHyper/bidirectionallstm_predictor_168h_window672_37708_38212.csv", sep=","))
xd1= data.frame(xd1)
view(xd1)
view(na.locf(xd1))
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
runApp('RVis')
?spectrum
runApp('RVis')
install.packages("keras")
library(keras)
install_keras()
library("keras")
model <- keras_load(path = "./Data/lstm_1h_window100.h5")
library("keras")
model <- load_model_hdf5(path = "./Data/lstm_1h_window100.h5")
model <- load_model_hdf5(filepath = "./Data/lstm_1h_window100.h5")
keras:::keras_version()
install_tensorflow()
install_kers()
install_keras()
