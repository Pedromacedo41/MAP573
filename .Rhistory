names(temp)<- a[j]
don <- cbind(don,temp)
}
}
}
dygraph(don) %>%
dyOptions(drawGrid = TRUE) %>%
dyRangeSelector() %>%
dyCrosshair(direction = "vertical") %>%
dyHighlight(highlightCircleSize = 5, highlightSeriesBackgroundAlpha = 0.2, hideOnMouseOut = FALSE)  %>%
dyRoller(rollPeriod = 24)
})
#output$table <-  renderDT(load_table)
# output$table2 <-  renderDT(temp_table)
output$table3 <-  renderDT(load_table)
output$table4 <-  renderDT(temp_table)
output$summary2 <-  renderPrint(summary(load_table))
output$summary3 <-  renderPrint(summary(temp_table))
output$summary <-  renderPrint({
don <- c()
for(i in (input$checkGroup)){
for(j in 1:20){
if(i==a[j]){
#print(a[j])
#print(j)
temp  <- xts(x = load_table[,j+2], order.by = load_table$datetime)
names(temp)<- a[j]
don <- cbind(don,temp)
}
}
for(j in 21:31){
if(i==a[j]){
temp  <- xts(x = temp_table[,j-20+2], order.by = temp_table$datetime)
names(temp)<- a[j]
don <- cbind(don,temp)
}
}
}
summary(don)
})
output$summary4 <-  renderPrint({
print(input$response2)
#gg <-  sqldf(input$response2)
#print(gg)
})
output$table2 <-  renderDT({
#gg <-  sqldf(input$response2)
#datatable(gg)
})
output$action <- function(){
print("kkkk")
}
}
shinyApp(ui = ui, server = server)
library(quantmod)
library(dygraphs)
library(data.table)
load_table= fread("./Data/TS.csv", sep=",")
s=fread("./../Data/TS.csv", sep=",")
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
library(dygraphs)
library(data.table)
load_table= fread("./Data/TS.csv", sep=",")
s=fread("./Data/TS.csv", sep=",")
load_table= data.frame(load_table)
temp_table= fread("./Data/TST.csv", sep=",")
temp_table= data.frame(temp_table)
library(xts)          # To make the convertion data-frame / xts format
library(tidyverse)
library(lubridate)
library(DT)
library(sqldf)
load_table$datetime <- ymd_hms(load_table$datetime)
temp_table$datetime <- ymd_hms(temp_table$datetime)
a= list()
for(i in 1:20){
a <- c(a, paste("Zone", i, " Load"))
}
for(i in 1:11){
a <- c(a, paste("St.", i, " Temp."))
}
ui <- navbarPage("Energy Forecast Data Visualisation",
tabPanel("Time Series",
sidebarPanel(width=3,
checkboxGroupInput("checkGroup",strong("Time Serie Select"),choices = a,selected = c(a[21], a[1], a[18]), inline = TRUE)
),
mainPanel(
tabsetPanel(
tabPanel("Plot", dygraphOutput("dygraph")),
tabPanel("Summary Plot", verbatimTextOutput("summary")),
tabPanel("Summary Load", verbatimTextOutput("summary2")),
tabPanel("Summary Temp", verbatimTextOutput("summary3"))
)
)
),
tabPanel("SQL Time Series",
sidebarPanel("SQL query on Dataframe:",
withTags(div(textarea(id = "response2", value= "select * from load_table", class = "form-control shiny-bound-input",style = "width: 400px; height: 100px"))),
helpText("SQLite is used .See table tab to see the Time Series column names. Result must contain datetime column to be ploted "),
actionButton("action", "Run Query"),
actionButton("action2", "Save to CSV"),
helpText("(/Data/result.csv)")
),
mainPanel(
tabsetPanel(
tabPanel("Plot ", dygraphOutput("dygraph2")),
tabPanel("Result Table", tableOutput("table2")),
tabPanel("Summary", verbatimTextOutput("summary4")),
tabPanel("Table Load", DTOutput('table3')),
tabPanel("Table Temp", DTOutput('table4'))
)
)
),
tabPanel("3D Time Series",
sidebarPanel(
radioButtons("radio", strong("Z axis quantity"),choices = list("Temperature" = 1, "Energy" = 2),selected = 1),
dateRangeInput("dates", strong("Date range")),
selectInput("select", strong("Zone_id Select"),choices = list("Zone1" = 1,"Zone2" = 2,"Zone3" = 3, "Zone4" = 4, "Zone5" = 5, "Zone6" = 6, "Zone7" = 7,
"Zone8" = 8,"Zone9" = 9,"Zone10" = 10,"Zone11" = 11,"Zone12" = 12,"Zone13" = 13,
"Zone14" = 14,"Zone15" = 15, "Zone16" = 16,"Zone17" = 17,"Zone18" = 18, "Zone19" = 19,
"Zone20" = 20),selected = 1)
),
mainPanel(
tabsetPanel(
tabPanel("Plot", dygraphOutput("dygraph3")),
tabPanel("Summary", verbatimTextOutput("summary5")),
tabPanel("Table", tableOutput("table5"))
)
)
)
)
server <- function(input, output) {
output$dygraph <- renderDygraph({
don <- c()
for(i in (input$checkGroup)){
for(j in 1:20){
if(i==a[j]){
#print(a[j])
#print(j)
temp  <- xts(x = load_table[,j+2], order.by = load_table$datetime)
names(temp)<- a[j]
don <- cbind(don,temp)
}
}
for(j in 21:31){
if(i==a[j]){
temp  <- xts(x = temp_table[,j-20+2], order.by = temp_table$datetime)
names(temp)<- a[j]
don <- cbind(don,temp)
}
}
}
dygraph(don) %>%
dyOptions(drawGrid = TRUE) %>%
dyRangeSelector() %>%
dyCrosshair(direction = "vertical") %>%
dyHighlight(highlightCircleSize = 5, highlightSeriesBackgroundAlpha = 0.2, hideOnMouseOut = FALSE)  %>%
dyRoller(rollPeriod = 24)
})
#output$table <-  renderDT(load_table)
# output$table2 <-  renderDT(temp_table)
output$table3 <-  renderDT(load_table)
output$table4 <-  renderDT(temp_table)
output$summary2 <-  renderPrint(summary(load_table))
output$summary3 <-  renderPrint(summary(temp_table))
output$summary <-  renderPrint({
don <- c()
for(i in (input$checkGroup)){
for(j in 1:20){
if(i==a[j]){
#print(a[j])
#print(j)
temp  <- xts(x = load_table[,j+2], order.by = load_table$datetime)
names(temp)<- a[j]
don <- cbind(don,temp)
}
}
for(j in 21:31){
if(i==a[j]){
temp  <- xts(x = temp_table[,j-20+2], order.by = temp_table$datetime)
names(temp)<- a[j]
don <- cbind(don,temp)
}
}
}
summary(don)
})
output$summary4 <-  renderPrint({
print(input$response2)
#gg <-  sqldf(input$response2)
#print(gg)
})
output$table2 <-  renderDT({
#gg <-  sqldf(input$response2)
#datatable(gg)
})
output$action <- function(){
print("kkkk")
}
}
shinyApp(ui = ui, server = server)
load_table= fread("./Data/TS.csv", sep=",")
TimeStamps  <- function(Load_his) {
datetime<-c()
for(i in 1:length(Load_his$zone_id)){
dtime=paste(toString(Load_his$year[i]), "-", toString(Load_his$month[i]),"-", toString(Load_his$day[i])," 0:00:00",sep="")
datetime<-rbind(datetime, dtime)
}
return(datetime)
}
ts <- TimeStamps(Load_his)
ts <- cbind(Load_his[,1], ts)
for(i in 1:24){
ts <- cbind(ts,as.numeric(sub(",", ".", Load_his[,i+4], fixed = TRUE)))
}
ts <- data.frame(ts)
names(ts)[2] <- "datetime"
write.csv(ts, paste("Data/TSDaily", ".csv", sep=""))
library(lubridate)
ts$datetime <- ymd_hms(ts$datetime)
library(sqldf)
gg <- sqldf("select * from ts where X1 = 1")
temp  <- xts(x = gg[,3:26], order.by = gg$datetime)
temp <- na.locf(temp)
chartSeries3d0(temp)
Z <- temp
pm <- persp(z=Z-min(Z),
x=(1:NROW(Z))/length(time.axis),
y=(1:NCOL(Z))/1,
shade=.3, ltheta=20,
r=10,
theta=50,
col=rep(rep(yred(NCOL(Z)/1),each=1),each=(NROW(Z)-1)),
scale=F, border=NA,box=FALSE)
temp  <- xts(x = gg[,3:26], order.by = gg$datetime)
temp <- na.locf(temp)
chartSeries3d0(temp)
Z <- temp
pm <- persp(z=Z-min(Z),
x=(1:NROW(Z))/length(time.axis),
y=(1:NCOL(Z))/1,
shade=.3, ltheta=20,
r=10,
theta=50,
col=rep(rep(yred(NCOL(Z)/1),each=1),each=(NROW(Z)-1)),
scale=F, border=NA,box=FALSE)
pm <- persp(z=Z-min(Z),
x=(1:NROW(Z))/length(time.axis),
y=(1:NCOL(Z))/1,
shade=.3, ltheta=20,
r=10,
theta=50,
col=rep(rep(yred(NCOL(Z)/1),each=1),each=(NROW(Z)-1)),
scale=F, border=NA,box=FALSE)
for(i in 1:24){
ts <- cbind(ts,as.numeric(sub(",", ".", Load_his[,i+4], fixed = TRUE)))
}
ts <- data.frame(ts)
names(ts)[2] <- "datetime"
ts$datetime <- ymd_hms(ts$datetime)
library(sqldf)
gg <- sqldf("select * from ts where X1 = 1")
temp  <- xts(x = gg[,3:26], order.by = gg$datetime)
gg <- na.locf(gg)
temp  <- xts(x = gg[,3:26], order.by = gg$datetime)
temp <- na.locf(temp)
Z <- temp
pm <- persp(z=Z-min(Z),
x=(1:NROW(Z))/length(time.axis),
y=(1:NCOL(Z))/1,
shade=.3, ltheta=20,
r=10,
theta=50,
col=rep(rep(yred(NCOL(Z)/1),each=1),each=(NROW(Z)-1)),
scale=F, border=NA,box=FALSE)
temp  <- xts(x = gg[,3:26], order.by = gg$datetime)
Z <- temp
pm <- persp(z=Z-min(Z),
x=(1:NROW(Z))/length(time.axis),
y=(1:NCOL(Z))/1,
shade=.3, ltheta=20,
r=10,
theta=50,
col=rep(rep(yred(NCOL(Z)/1),each=1),each=(NROW(Z)-1)),
scale=F, border=NA,box=FALSE)
load_table= fread("./Data/TS.csv", sep=",")
s=fread("./Data/TS.csv", sep=",")
TimeStamps  <- function(Load_his) {
datetime<-c()
for(i in 1:length(Load_his$zone_id)){
dtime=paste(toString(Load_his$year[i]), "-", toString(Load_his$month[i]),"-", toString(Load_his$day[i])," 0:00:00",sep="")
datetime<-rbind(datetime, dtime)
}
return(datetime)
}
ts <- TimeStamps(Load_his)
ts <- cbind(Load_his[,1], ts)
for(i in 1:24){
ts <- cbind(ts,as.numeric(sub(",", ".", Load_his[,i+4], fixed = TRUE)))
}
ts <- data.frame(ts)
names(ts)[2] <- "datetime"
write.csv(ts, paste("Data/TSDaily", ".csv", sep=""))
library(lubridate)
ts$datetime <- ymd_hms(ts$datetime)
library(sqldf)
gg <- sqldf("select * from ts where X1 = 1")
gg <- na.locf(gg)
temp  <- xts(x = gg[,3:26], order.by = gg$datetime)
temp <- na.locf(temp)
chartSeries3d0(temp)
Z <- temp
pm <- persp(z=Z-min(Z),
x=(1:NROW(Z))/length(time.axis),
y=(1:NCOL(Z))/1,
shade=.3, ltheta=20,
r=10,
theta=50,
col=rep(rep(yred(NCOL(Z)/1),each=1),each=(NROW(Z)-1)),
scale=F, border=NA,box=FALSE)
shinyApp(ui = ui, server = server)
library(dygraphs)
library(data.table)
load_table= fread("./Data/TS.csv", sep=",")
s=fread("./Data/TS.csv", sep=",")
load_table= data.frame(load_table)
temp_table= fread("./Data/TST.csv", sep=",")
temp_table= data.frame(temp_table)
library(xts)          # To make the convertion data-frame / xts format
library(tidyverse)
library(lubridate)
library(DT)
library(sqldf)
load_table$datetime <- ymd_hms(load_table$datetime)
temp_table$datetime <- ymd_hms(temp_table$datetime)
a= list()
for(i in 1:20){
a <- c(a, paste("Zone", i, " Load"))
}
for(i in 1:11){
a <- c(a, paste("St.", i, " Temp."))
}
ui <- navbarPage("Energy Forecast Data Visualisation",
tabPanel("Time Series",
sidebarPanel(width=3,
checkboxGroupInput("checkGroup",strong("Time Serie Select"),choices = a,selected = c(a[21], a[1], a[18]), inline = TRUE)
),
mainPanel(
tabsetPanel(
tabPanel("Plot", dygraphOutput("dygraph")),
tabPanel("Summary Plot", verbatimTextOutput("summary")),
tabPanel("Summary Load", verbatimTextOutput("summary2")),
tabPanel("Summary Temp", verbatimTextOutput("summary3"))
)
)
),
tabPanel("SQL Time Series",
sidebarPanel("SQL query on Dataframe:",
withTags(div(textarea(id = "response2", value= "select * from load_table", class = "form-control shiny-bound-input",style = "width: 400px; height: 100px"))),
helpText("SQLite is used .See table tab to see the Time Series column names. Result must contain datetime column to be ploted "),
actionButton("action", "Run Query"),
actionButton("action2", "Save to CSV"),
helpText("(/Data/result.csv)")
),
mainPanel(
tabsetPanel(
tabPanel("Plot ", dygraphOutput("dygraph2")),
tabPanel("Result Table", tableOutput("table2")),
tabPanel("Summary", verbatimTextOutput("summary4")),
tabPanel("Table Load", DTOutput('table3')),
tabPanel("Table Temp", DTOutput('table4'))
)
)
),
tabPanel("3D Time Series",
sidebarPanel(
radioButtons("radio", strong("Z axis quantity"),choices = list("Temperature" = 1, "Energy" = 2),selected = 1),
dateRangeInput("dates", strong("Date range")),
selectInput("select", strong("Zone_id Select"),choices = list("Zone1" = 1,"Zone2" = 2,"Zone3" = 3, "Zone4" = 4, "Zone5" = 5, "Zone6" = 6, "Zone7" = 7,
"Zone8" = 8,"Zone9" = 9,"Zone10" = 10,"Zone11" = 11,"Zone12" = 12,"Zone13" = 13,
"Zone14" = 14,"Zone15" = 15, "Zone16" = 16,"Zone17" = 17,"Zone18" = 18, "Zone19" = 19,
"Zone20" = 20),selected = 1)
),
mainPanel(
tabsetPanel(
tabPanel("Plot", dygraphOutput("dygraph3")),
tabPanel("Summary", verbatimTextOutput("summary5")),
tabPanel("Table", tableOutput("table5"))
)
)
)
)
server <- function(input, output) {
output$dygraph <- renderDygraph({
don <- c()
for(i in (input$checkGroup)){
for(j in 1:20){
if(i==a[j]){
#print(a[j])
#print(j)
temp  <- xts(x = load_table[,j+2], order.by = load_table$datetime)
names(temp)<- a[j]
don <- cbind(don,temp)
}
}
for(j in 21:31){
if(i==a[j]){
temp  <- xts(x = temp_table[,j-20+2], order.by = temp_table$datetime)
names(temp)<- a[j]
don <- cbind(don,temp)
}
}
}
dygraph(don) %>%
dyOptions(drawGrid = TRUE) %>%
dyRangeSelector() %>%
dyCrosshair(direction = "vertical") %>%
dyHighlight(highlightCircleSize = 5, highlightSeriesBackgroundAlpha = 0.2, hideOnMouseOut = FALSE)  %>%
dyRoller(rollPeriod = 24)
})
#output$table <-  renderDT(load_table)
# output$table2 <-  renderDT(temp_table)
output$table3 <-  renderDT(load_table)
output$table4 <-  renderDT(temp_table)
output$summary2 <-  renderPrint(summary(load_table))
output$summary3 <-  renderPrint(summary(temp_table))
output$summary <-  renderPrint({
don <- c()
for(i in (input$checkGroup)){
for(j in 1:20){
if(i==a[j]){
#print(a[j])
#print(j)
temp  <- xts(x = load_table[,j+2], order.by = load_table$datetime)
names(temp)<- a[j]
don <- cbind(don,temp)
}
}
for(j in 21:31){
if(i==a[j]){
temp  <- xts(x = temp_table[,j-20+2], order.by = temp_table$datetime)
names(temp)<- a[j]
don <- cbind(don,temp)
}
}
}
summary(don)
})
output$summary4 <-  renderPrint({
print(input$response2)
#gg <-  sqldf(input$response2)
#print(gg)
})
output$table2 <-  renderDT({
#gg <-  sqldf(input$response2)
#datatable(gg)
})
output$action <- function(){
print("kkkk")
}
}
shinyApp(ui = ui, server = server)
TimeStamps  <- function(Load_his) {
datetime<-c()
for(i in 1:length(Load_his$zone_id)){
dtime=paste(toString(Load_his$year[i]), "-", toString(Load_his$month[i]),"-", toString(Load_his$day[i])," 0:00:00",sep="")
datetime<-rbind(datetime, dtime)
}
return(datetime)
}
ts <- TimeStamps(Load_his)
ts <- cbind(Load_his[,1], ts)
for(i in 1:24){
ts <- cbind(ts,as.numeric(sub(",", ".", Load_his[,i+4], fixed = TRUE)))
}
ts <- data.frame(ts)
names(ts)[2] <- "datetime"
write.csv(ts, paste("Data/TSDaily", ".csv", sep=""))
library(lubridate)
ts$datetime <- ymd_hms(ts$datetime)
library(sqldf)
gg <- sqldf("select * from ts where X1 = 1")
temp  <- xts(x = gg[,3:26], order.by = gg$datetime)
temp <- na.locf(temp)
chartSeries3d0(temp)
Z <- temp
pm <- persp(z=Z-min(Z),
x=(1:NROW(Z))/length(time.axis),
y=(1:NCOL(Z))/1,
shade=.3, ltheta=20,
r=10,
theta=50,
col=rep(rep(yred(NCOL(Z)/1),each=1),each=(NROW(Z)-1)),
scale=F, border=NA,box=FALSE)
pm <- persp(z=Z-min(Z),
x=(1:NROW(Z))/length(time.axis),
y=(1:NCOL(Z))/1,
shade=.3, ltheta=20,
r=10,
theta=50,
col=rep(rep(yred(NCOL(Z)/1),each=1),each=(NROW(Z)-1)),
scale=F, border=NA,box=FALSE)
shinyApp(ui = ui, server = server)
source("http://www.quantmod.com/examples/chartSeries3d/chartSeries3d.alpha.R")
getSymbols("DGS1MO;DGS3MO;DGS6MO;DGS1;DGS2;DGS3;DGS5;DGS7;DGS10;DGS20;DGS30",src="FRED")
TR <- merge(DGS1MO,DGS3MO,DGS6MO,DGS1,DGS2,DGS3,DGS5,DGS7,DGS10,DGS20,DGS30, all=FALSE)
colnames(TR) <- c("1mo","3mo","6mo","1yr","2yr","3yr","5yr","7yr","10yr","20yr","30yr")
TR <- na.locf(TR)
chartSeries3d0(TR["2011"])
names(ts)[2] <- "datetime"
ts$datetime <- ymd_hms(ts$datetime)
