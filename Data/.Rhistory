TSmeans[1]
TSmeans_standardized <- rowMeans(TSstandardized[1:29414, ])
TSTmeans <- rowMeans(TST[1:29414, ])
TSTmeans[1]
TSTmeans_standardized <- rowMeans(TSTstandardized[1:29414, ])
Z <- t(as.matrix(TS))
TSTstandardized <- t(scale(Z, center = TRUE, scale = TRUE))
TSmeans <- rowMeans(TS[1:29414, ])
TSmeans[1]
TSmeans_standardized <- rowMeans(TSstandardized[1:29414, ])
TSTmeans <- rowMeans(TST[1:29414, ])
TSTmeans[1]
TSTmeans_standardized <- rowMeans(TSTstandardized[1:29414, ])
View(TSTstandardized)
View(TST)
View(TST)
#STANDARDIZE
Z <- t(as.matrix(TS))
TSstandardized <-  t(scale(Z, center = TRUE, scale = TRUE))
Z <- t(as.matrix(TST))
TSTstandardized <- t(scale(Z, center = TRUE, scale = TRUE))
TSmeans <- rowMeans(TS[1:29414, ])
TSmeans[1]
TSmeans_standardized <- rowMeans(TSstandardized[1:29414, ])
TSTmeans <- rowMeans(TST[1:29414, ])
TSTmeans[1]
TSTmeans_standardized <- rowMeans(TSTstandardized[1:29414, ])
Z <- t(as.matrix(TS))
TSstandardized <-  t(scale(Z, center = TRUE, scale = TRUE))
Z <- t(as.matrix(TST))
TSTstandardized <- t(scale(Z, center = TRUE, scale = TRUE))
TSmeans <- rowMeans(TS[1:29414, ])
TSmeans[1]
TSmeans_standardized <- rowMeans(TSstandardized[1:29414, ])
TSTmeans <- rowMeans(TST[1:29414, ])
TSTmeans[1]
TSTmeans_standardized <- rowMeans(TSTstandardized[1:29414, ])
plot(TSTmeans, TSmeans,
main = "Relationship between energy load and temperature",
xlab = "Temperature [F]",
ylab = "Load [xW]",
cex = 0.1,
panel.first = grid(nx = NULL, ny = NULL, col = "red", lty = "dotted"))
plot(TSTmeans_standardized, TSmeans_standardized,
main = "Relationship between energy load and temperature (standardized)",
xlab = "Temperature",
ylab = "Load",
cex = 0.1,
panel.first = grid(nx = NULL, ny = NULL, col = "red", lty = "dotted"))
plot(TSTmeans, TSmeans_standardized,
main = "Relationship between energy load and temperature (standardized)",
xlab = "Temperature",
ylab = "Load",
cex = 0.1,
panel.first = grid(nx = NULL, ny = NULL, col = "red", lty = "dotted"))
View(TS)
View(TS)
A1 = TS/apply(TS,1,TS)
A2 = t(t(TS)/apply(Z,2,Z))
Z <- as.matrix(TS)
A1 = Z/apply(Z,1,Z)
maxcol <- Rfast::colMaxs(TS)
maxcol <- Rfast::colMaxs(as.numeric(TS)
maxcol <- Rfast::colMaxs(as.numeric(TS))
Z <- as.matrix(TS)
rescalemat <- function(x){
apply(mat, 1, function(x){
colmax<-apply(mat, 2, function(x) max(x))
rowmax<-apply(mat, 1, function(x) max(x))
x/min(colmax,rowmax)
mat
})
}
Z <- rescalemat(Z)
Z <- as.matrix(TS)
rescalemat <- function(mat){
apply(mat, 1, function(x){
colmax<-apply(mat, 2, function(x) max(x))
rowmax<-apply(mat, 1, function(x) max(x))
x/min(colmax,rowmax)
mat
})
}
Z <- rescalemat(Z)
View(Z)
View(Z)
Z
library(forecast)
library(xts)
TS <- read.csv("TS.csv")
row.names(TS) <- TS$datetime
TS <- TS[,3:22]
colnames(TS) <-  c("Z1", "Z2", "Z3", "Z4", "Z5", "Z6", "Z7", "Z8", "Z9",
"Z10", "Z11", "Z12" ,"Z13", "Z14", "Z15", "Z16", "Z17", "Z18", "Z19", "Z20")
TS <- TS[1]
#TS
startDay <- as.POSIXct(row.names(TS)[1], format = "%Y-%m-%d %H:%M:")
load.ts <- ts(TS, start = as.numeric(startDay))
#ZOO
times <- as.POSIXct(row.names(TS), format = "%Y-%m-%d %H:%M:")
load.zoo <- as.zoo(
x         = TS,
order.by  = times,
frequency = 24
)
ggAcf(load.ts)
ggAcf(load.ts, type="partial")
ggAcf(load.ts, type="partial", lag.max=30)
load.ts
ggAcf(load.ts)
ggAcf(load.ts, type="partial", lag.max=30)
ggAcf(load.ts, type="partial")
ggAcf(load.ts)
?ggAcf
ggAcf(load.ts, type = c("correlation", "covariance","partial"))
ggAcf(load.ts, type = c("correlation", "covariance","partial"))
ggAcf(load.ts, type = "correlation")
ggAcf(load.ts, type = "covariance")
ggAcf(load.ts, type = "partial")
g <- ggAcf(load_xts, plot=FALSE)
g <- ggAcf(load.ts, plot=FALSE)
g
ggAcf(load.ts)
ggAcf(load.zoo)
library(forecast)
library(xts)
setwd("~/Documents/Skóli/École Polytechnique/Data Analysis and Unsupervised Learning /Project/Data")
TS <- read.csv("TS.csv")
row.names(TS) <- TS$datetime
TS <- TS[,3:22]
colnames(TS) <-  c("Z1", "Z2", "Z3", "Z4", "Z5", "Z6", "Z7", "Z8", "Z9",
"Z10", "Z11", "Z12" ,"Z13", "Z14", "Z15", "Z16", "Z17", "Z18", "Z19", "Z20")
TS <- TS[1] #ONly zone1
#TS
startDay <- as.POSIXct(row.names(TS)[1], format = "%Y-%m-%d %H:%M:")
load.ts <- ts(TS, start = as.numeric(startDay), frequency = 24) #This time seires gives time/date as a number, not right
class(load.ts)
head(load.ts)
summary(load.ts)
#ZOO
times <- as.POSIXct(row.names(TS), format = "%Y-%m-%d %H:%M:")
load.zoo <- as.zoo(
x         = TS,
order.by  = times,
frequency = 24
)
class(load.zoo)
head(load.zoo)
summary(load.zoo)
autoplot(load.zoo)
gglagplot(load.ts, do.lines = FALSE, set.lags = 1:30)
ggAcf(load.ts)
ggAcf(load.zoo, na.action = na.pass, lag.max = 24*35)
ggAcf(load.zoo, plot=FALSE)
ggAcf(load.zoo, plot=FALSE)
ggAcf(load.zoo, na.action = na.pass, lag.max = 24*35)
ggAcf(load.ts)
ggAcf(load.ts)
ggAcf(load.ts)
ggAcf(load.ts, na.action = na.pass, lag.max = 24*35)
ggAcf(load.ts, na.action = na.pass, lag.max = 24*35)
ggAcf(load.ts, plot=FALSE)
plot(diff(load.ts))
#autoplot(load.zoo)
#gglagplot(load.ts, do.lines = FALSE, set.lags = 1:30)
ggAcf(load.ts)
ggAcf(load.ts, na.action = na.pass, lag.max = 24*35)
ggAcf(load.ts, type = "partial")
ggAcf(load.ts, plot=FALSE)
ggAcf(load.ts, type = "partial", plot=FALSE)
plot(diff(load.ts))
ggAcf(load.ts, type = "partial", plot=FALSE, lag.max = 24*35)
ggAcf(load.ts, type = "partial", lag.max = 24*35)
ggAcf(load.ts, type = "partial", lag.max = 24)
ggAcf(load.ts, type = "partial")
ggAcf(load.ts, type = "partial", lag.max = 24*30)
ggAcf(load.ts, type = "partial", lag.max = 24*15)
ggAcf(load.ts, type = "partial", lag.max = 50)
ggAcf(load.ts, type = "partial", lag.max = 24*3)
ggAcf(load.ts, type = "partial", lag.max = 24*7)
ggAcf(load.ts, type = "partial")
ggAcf(load.ts, type = "partial", lag.max = 24*7)
ggAcf(load.ts, na.action = na.pass, lag.max = 24*35)
ggAcf(load.ts)
ggAcf(load.ts, na.action = na.pass, lag.max = 24*35)
ggAcf(load.ts, type = "partial")
ggAcf(load.ts)
ggAcf(load.ts)
ggAcf(load.ts, na.action = na.pass, lag.max = 24*35)
```{r chunk 5}
ggAcf(load.ts, type = "partial")
ggAcf(load.ts, type = "partial")
ggAcf(load.ts, type = "partial", lag.max = 24*7)
ggAcf(load.ts, type = "partial")
ggAcf(load.ts, type = "partial", lag.max = 24*7)
ggAcf(load.ts, plot=FALSE)
ggAcf(load.ts, type = "partial", plot=FALSE)
ggAcf(load.ts, type = "partial")
ggAcf(load.ts, type = "partial", lag.max = 24*7)
ggAcf(load.ts, plot=FALSE)
ggAcf(load.ts, type = "partial", plot=FALSE)
ggAcf(load.ts, type = "partial", lag.max = 24*7*4)
autoplot(load.zoo[1:24])
?autoplot
autoplot(load.zoo[1:24], main="ll")
load.zoo[2005]
load.zoo["2005"]
autoplot(load.zoo[1:24], main="24 hours from baseline")
autoplot(load.zoo[1:24*7], main="week from baseline")
autoplot(load.zoo[1:24*7*4], main="month from baseline")
ggAcf(load.ts, type = "partial")
ggAcf(load.ts, type = "partial", lag.max = 24*7)
ggAcf(load.ts, type = "partial", lag.max = 24*7*4)
ggAcf(load.ts, plot=FALSE)
ggAcf(load.ts, type = "partial", plot=FALSE)
plot(diff(load.ts))
ggAcf(load.ts, type = "partial", lag.max = 24*7*4*12)
ggAcf(load.ts, type = "partial", lag.max = 24*7*4*24)
ggAcf(load.ts, type = "partial", lag.max = 24*7*4)
ggAcf(load.ts, type = "partial")
ggAcf(load.ts, type = "partial", lag.max = 24*7)
times <- as.POSIXct(row.names(data), format = "%Y-%m-%d %H:%M:")
setwd("~/Documents/Skóli/École Polytechnique/Data Analysis and Unsupervised Learning /Project/Data")
TS <- read.csv("TS.csv")
TST <- read.csv("TST.csv")
row.names(TST) <- TST$datetime
TST = subset(TST, select = -c(X, datetime))
row.names(TS) <- TS$datetime
TS = subset(TS, select = -c(X, datetime))
TS <- TS[,1:11]
Z <- t(as.matrix(TS))
TSstandardized <-  t(scale(Z, center = TRUE, scale = TRUE))
Z <- t(as.matrix(TST))
TSTstandardized <- t(scale(Z, center = TRUE, scale = TRUE))
TSmeans <- rowMeans(TS[1:29414, ])
TSmeans[1]
TSmeans_standardized <- rowMeans(TSstandardized[1:29414, ])
TSTmeans <- rowMeans(TST[1:29414, ])
TSTmeans[1]
TSTmeans_standardized <- rowMeans(TSTstandardized[1:29414, ])
data <- as.data.frame(cbind(TSTmeans, TSmeans))
data_standardized <- as.data.frame(cbind(TSTmeans_standardized, TSmeans_standardized))
plot(TSTmeans, TSmeans,
main = "Relationship between energy load and temperature",
xlab = "Temperature [F]",
ylab = "Load [xW]",
cex = 0.1,
panel.first = grid(nx = NULL, ny = NULL, col = "red", lty = "dotted"))
plot(TSTmeans_standardized, TSmeans_standardized,
main = "Relationship between energy load and temperature (standardized)",
xlab = "Temperature",
ylab = "Load",
cex = 0.1,
panel.first = grid(nx = NULL, ny = NULL, col = "red", lty = "dotted"))
library(zoo)
times <- as.POSIXct(row.names(data), format = "%Y-%m-%d %H:%M:")
timesNAomit <- na.omit(times)
load.ts <- zoo(
x         = data$TSmeans,
order.by  = timesNAomit,
frequency = 24
)
temperature.ts <- zoo(
x         = data$TSTmeans,
order.by  = timesNAomit,
frequency = 24
)
plotData <- cbind(load.ts, temperature.ts)
library(ggplot2)
ggplot(plotData, aes(timesNAomit)) +
geom_line(aes(y = load.ts, colour = "Load")) +
geom_line(aes(y = temperature.ts, colour = "Temperature"))+
labs(title= "Correlation of load and temperature",
y="Value", x = "Year")
ggAcf(load.ts)
library(forecast)
library(xts)
setwd("~/Documents/Skóli/École Polytechnique/Data Analysis and Unsupervised Learning /Project/Data")
TS <- read.csv("TS.csv")
row.names(TS) <- TS$datetime
TS <- TS[,3:22]
colnames(TS) <-  c("Z1", "Z2", "Z3", "Z4", "Z5", "Z6", "Z7", "Z8", "Z9",
"Z10", "Z11", "Z12" ,"Z13", "Z14", "Z15", "Z16", "Z17", "Z18", "Z19", "Z20")
TS <- TS[1] #ONly zone1
#TS
startDay <- as.POSIXct(row.names(TS)[1], format = "%Y-%m-%d %H:%M:")
load.ts <- ts(TS, start = as.numeric(startDay), frequency = 24) #This time seires gives time/date as a number, not right
class(load.ts)
head(load.ts)
summary(load.ts)
#ZOO
times <- as.POSIXct(row.names(TS), format = "%Y-%m-%d %H:%M:")
load.zoo <- as.zoo(
x         = TS,
order.by  = times,
frequency = 24
)
class(load.zoo)
head(load.zoo)
summary(load.zoo)
ggAcf(load.ts)
ggAcf(load.ts, na.action = na.pass, lag.max = 24*35)
gglagplot(load.ts, do.lines = FALSE, set.lags = 1:30)
source('~/Documents/Skóli/École Polytechnique/Data Analysis and Unsupervised Learning /Project/timeStest.R')
source('~/Documents/Skóli/École Polytechnique/Data Analysis and Unsupervised Learning /Project/timeStest.R')
source('~/Documents/Skóli/École Polytechnique/Data Analysis and Unsupervised Learning /Project/timeStest.R')
setwd("~.../Data/")
setwd("../Data/")
setwd("../Data/")
TS <- read.csv("TS.csv")
setwd("../Data/")
setwd("../Data")
TS <- read.csv("TS.csv")
setwd("../Data/")
TS <- read.csv("TS.csv")
TST <- read.csv("TST.csv")
setwd("~/Documents/Skóli/École Polytechnique/Data Analysis and Unsupervised Learning /Project/MAP573/Data")
TS <- read.csv("TS.csv")
TST <- read.csv("TST.csv")
setwd("../Data/")
setwd("../Data/")
TS <- read.csv("TS.csv")
setwd("../Data/")
TS <- read.csv("TS.csv")
TST <- read.csv("TST.csv")
setwd("../Data/")
setwd("../Data/")
TS <- read.csv("TS.csv")
setwd("./Data/")
TS <- read.csv("TS.csv")
setwd(".../Data/")
setwd("../Data/")
TS <- read.csv("TS.csv")
TST <- read.csv("TST.csv")
TS <- read.csv(".../Data/TS.csv")
TS <- read.csv("../Data/TS.csv")
TST <- read.csv("../TST.csv")
TST <- read.csv("../Data/TST.csv")
TS <- read.csv("../Data/TS.csv")
gglagplot(load.ts, do.lines = FALSE, set.lags = 1:30)
library(forecast)
library(xts)
TS <- read.csv("../Data/TS.csv")
row.names(TS) <- TS$datetime
TS <- TS[,3:22]
colnames(TS) <-  c("Z1", "Z2", "Z3", "Z4", "Z5", "Z6", "Z7", "Z8", "Z9",
"Z10", "Z11", "Z12" ,"Z13", "Z14", "Z15", "Z16", "Z17", "Z18", "Z19", "Z20")
TS <- TS[1] #ONly zone1
#TS
startDay <- as.POSIXct(row.names(TS)[1], format = "%Y-%m-%d %H:%M:")
load.ts <- ts(TS, start = as.numeric(startDay), frequency = 24) #This time seires gives time/date as a number, not right
class(load.ts)
head(load.ts)
summary(load.ts)
#ZOO
times <- as.POSIXct(row.names(TS), format = "%Y-%m-%d %H:%M:")
load.zoo <- as.zoo(
x         = TS,
order.by  = times,
frequency = 24
)
class(load.zoo)
head(load.zoo)
summary(load.zoo)
gglagplot(load.ts, do.lines = FALSE, set.lags = 1:30)
TS <- read.csv("../Data/TS.csv")
TST <- read.csv("../Data/TST.csv")
row.names(TST) <- TST$datetime
TST = subset(TST, select = -c(X, datetime))
row.names(TS) <- TS$datetime
TS = subset(TS, select = -c(X, datetime))
#I assume the temperature zones (1-11) are Z1-Z11  in the loadTS.
#Now we can plot the temperature vs load
#plot(TST, TS) #Can be done but zones will form different clusters
#Maybe better to take the average across all zones
#STANDARDIZE
Z <- t(as.matrix(TS))
TSstandardized <-  t(scale(Z, center = TRUE, scale = TRUE))
Z <- t(as.matrix(TST))
TSTstandardized <- t(scale(Z, center = TRUE, scale = TRUE))
TSmeans <- rowMeans(TS[1:29414, ])
TSmeans[1]
TSmeans_standardized <- rowMeans(TSstandardized[1:29414, ])
TSTmeans <- rowMeans(TST[1:29414, ])
TSTmeans[1]
TSTmeans_standardized <- rowMeans(TSTstandardized[1:29414, ])
data <- as.data.frame(cbind(TSTmeans, TSmeans))
data_standardized <- as.data.frame(cbind(TSTmeans_standardized, TSmeans_standardized))
plot(TSTmeans, TSmeans,
main = "Relationship between energy load and temperature",
xlab = "Temperature [F]",
ylab = "Load [xW]",
cex = 0.1,
panel.first = grid(nx = NULL, ny = NULL, col = "red", lty = "dotted"))
plot(TSTmeans_standardized, TSmeans_standardized,
main = "Relationship between energy load and temperature (standardized)",
xlab = "Temperature",
ylab = "Load",
cex = 0.1,
panel.first = grid(nx = NULL, ny = NULL, col = "red", lty = "dotted"))
TS <- read.csv("../Data/TS.csv")
TST <- read.csv("../Data/TST.csv")
row.names(TST) <- TST$datetime
TST = subset(TST, select = -c(X, datetime))
row.names(TS) <- TS$datetime
TS = subset(TS, select = -c(X, datetime))
#I assume the temperature zones (1-11) are Z1-Z11  in the loadTS.
#Now we can plot the temperature vs load
#plot(TST, TS) #Can be done but zones will form different clusters
#Maybe better to take the average across all zones
#STANDARDIZE
Z <- t(as.matrix(TS))
TSstandardized <-  t(scale(Z, center = TRUE, scale = TRUE))
Z <- t(as.matrix(TST))
TSTstandardized <- t(scale(Z, center = TRUE, scale = TRUE))
TSmeans <- rowMeans(TS[1:29414, ])
TSmeans[1]
TSmeans_standardized <- rowMeans(TSstandardized[1:29414, ])
TSTmeans <- rowMeans(TST[1:29414, ])
TSTmeans[1]
TSTmeans_standardized <- rowMeans(TSTstandardized[1:29414, ])
data <- as.data.frame(cbind(TSTmeans, TSmeans))
data_standardized <- as.data.frame(cbind(TSTmeans_standardized, TSmeans_standardized))
plot(TSTmeans, TSmeans,
main = "Relationship between energy load and temperature",
xlab = "Temperature [F]",
ylab = "Load [xW]",
cex = 0.1,
panel.first = grid(nx = NULL, ny = NULL, col = "red", lty = "dotted"))
plot(TSTmeans_standardized, TSmeans_standardized,
main = "Relationship between energy load and temperature (standardized)",
xlab = "Temperature",
ylab = "Load",
cex = 0.1,
panel.first = grid(nx = NULL, ny = NULL, col = "red", lty = "dotted"))
Z <- TS
Z <- as.numeric(TS)
Z <- as.matrix(TS)
?max
max(Z)
min(Z)
View(Z)
View(Z)
max(Z, na.rm=TRUE)
colMax(Z, na.rm=TRUE)
install.packages("xcms")
colMax <- function(X) apply(X, 2, max)
colMax(Z, na.rm=TRUE)
colMax(Z)
?apply
colMax <- function(X) apply(na.ommit(X), 2, max)
colMax(Z, na.rm=TRUE)
colMax <- function(X) apply(na.ommit(X), 2, max)
colMax(Z)
colMax <- function(X) apply(na.omit(X), 2, max)
colMax(Z)
Zmax <- colMax(Z)
ZZ <- Z/Zmax
View(ZZ)
View(ZZ)
?apply
ZZ <- apply(Z, , function(x) x/Zmax)
ZZ <- apply(Z, 20, function(x) x/Zmax)
ZZ <- apply(Z, 1, function(x) x/Zmax)
View(ZZ)
View(ZZ)
?sapply
ZZ <- sapply(Z, function(x) x/Zmax)
View(ZZ)
View(ZZ)
head(ZZ)
head(ZZ)
dim(Z)
dim(Zmax)
Zmax <- colMax(Z)
dim(Zmax)
Z <- as.matrix(TS)
colMax <- function(X) apply(na.omit(X), 2, max)
Zmax <- colMax(Z)
Zmax
Zmax[1]
Zmax <- as.numeric(colMax(Z))
Zmax
ZZ <- Z/Zmax
View(ZZ)
View(ZZ)
Z <- as.matrix(TS)
colMax <- function(X) apply(na.omit(X), 2, max)
Zmax <- as.numeric(colMax(Z))
ZZ <- Z/t(Zmax)
ZZ <- Z/Zmax
c <- apply(Z, 2, function(x) x / Zmax)
View(c)
View(c)
Z <- as.matrix(TS)
colMax <- function(X) apply(na.omit(X), 2, max)
Zmax <- as.numeric(colMax(Z))
c <- apply(Z, 2, function(x) as.numeric(x) / Zmax)
View(c)
View(c)
?apply
c(1:20)
c <- apply(Z, c(1:20), function(x) as.numeric(x) / Zmax)
View(Z)
View(Z)
c <- apply(Z, c(20), function(x) as.numeric(x) / Zmax)
c <- apply(Z, c(20), function(x) as.numeric(x) / Zmax)
c <- apply(Z, 19, function(x) as.numeric(x) / Zmax)
c <- apply(Z, 21,  function(x) as.numeric(x) / Zmax)
c <- apply(Z, 1,  function(x) as.numeric(x) / Zmax)
c <- apply(Z, 2,  function(x) as.numeric(x) / Zmax)
?mapply
